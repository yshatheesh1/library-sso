//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using MySqlConnector;

namespace BBCoders.SSO.Storage
{
    public class BaseRepository
    {
        private readonly string _connectionString;
        public BaseRepository(string connectionString){ this._connectionString = connectionString; }
        public async Task<ClientModel> SelectClient(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT * FROM `Clients` AS `c` WHERE `c`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await GetClientResultSet(cmd);
            }
        }
        private async Task<ClientModel> GetClientResultSet(MySqlCommand cmd, ClientModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new ClientModel();
                result.Id = (Int32)reader["Id"];
                result.AbsoluteRefreshTokenLifetime = (Int32)reader["AbsoluteRefreshTokenLifetime"];
                result.AccessTokenLifetime = (Int32)reader["AccessTokenLifetime"];
                result.AccessTokenType = (Int32)reader["AccessTokenType"];
                result.AllowAccessTokensViaBrowser = (Boolean)reader["AllowAccessTokensViaBrowser"];
                result.AllowOfflineAccess = (Boolean)reader["AllowOfflineAccess"];
                result.AllowPlainTextPkce = (Boolean)reader["AllowPlainTextPkce"];
                result.AllowRememberConsent = (Boolean)reader["AllowRememberConsent"];
                result.AllowedIdentityTokenSigningAlgorithms = Convert.IsDBNull(reader["AllowedIdentityTokenSigningAlgorithms"]) ? null : (String)reader["AllowedIdentityTokenSigningAlgorithms"];
                result.AlwaysIncludeUserClaimsInIdToken = (Boolean)reader["AlwaysIncludeUserClaimsInIdToken"];
                result.AlwaysSendClientClaims = (Boolean)reader["AlwaysSendClientClaims"];
                result.AuthorizationCodeLifetime = (Int32)reader["AuthorizationCodeLifetime"];
                result.BackChannelLogoutSessionRequired = (Boolean)reader["BackChannelLogoutSessionRequired"];
                result.BackChannelLogoutUri = Convert.IsDBNull(reader["BackChannelLogoutUri"]) ? null : (String)reader["BackChannelLogoutUri"];
                result.ClientClaimsPrefix = Convert.IsDBNull(reader["ClientClaimsPrefix"]) ? null : (String)reader["ClientClaimsPrefix"];
                result.ClientId = (String)reader["ClientId"];
                result.ClientName = Convert.IsDBNull(reader["ClientName"]) ? null : (String)reader["ClientName"];
                result.ClientUri = Convert.IsDBNull(reader["ClientUri"]) ? null : (String)reader["ClientUri"];
                result.ConsentLifetime = Convert.IsDBNull(reader["ConsentLifetime"]) ? null : (Int32?)reader["ConsentLifetime"];
                result.Created = (DateTime)reader["Created"];
                result.Description = Convert.IsDBNull(reader["Description"]) ? null : (String)reader["Description"];
                result.DeviceCodeLifetime = (Int32)reader["DeviceCodeLifetime"];
                result.EnableLocalLogin = (Boolean)reader["EnableLocalLogin"];
                result.Enabled = (Boolean)reader["Enabled"];
                result.FrontChannelLogoutSessionRequired = (Boolean)reader["FrontChannelLogoutSessionRequired"];
                result.FrontChannelLogoutUri = Convert.IsDBNull(reader["FrontChannelLogoutUri"]) ? null : (String)reader["FrontChannelLogoutUri"];
                result.IdentityTokenLifetime = (Int32)reader["IdentityTokenLifetime"];
                result.IncludeJwtId = (Boolean)reader["IncludeJwtId"];
                result.LastAccessed = Convert.IsDBNull(reader["LastAccessed"]) ? null : (DateTime?)reader["LastAccessed"];
                result.LogoUri = Convert.IsDBNull(reader["LogoUri"]) ? null : (String)reader["LogoUri"];
                result.NonEditable = (Boolean)reader["NonEditable"];
                result.PairWiseSubjectSalt = Convert.IsDBNull(reader["PairWiseSubjectSalt"]) ? null : (String)reader["PairWiseSubjectSalt"];
                result.ProtocolType = (String)reader["ProtocolType"];
                result.RefreshTokenExpiration = (Int32)reader["RefreshTokenExpiration"];
                result.RefreshTokenUsage = (Int32)reader["RefreshTokenUsage"];
                result.RequireClientSecret = (Boolean)reader["RequireClientSecret"];
                result.RequireConsent = (Boolean)reader["RequireConsent"];
                result.RequirePkce = (Boolean)reader["RequirePkce"];
                result.RequireRequestObject = (Boolean)reader["RequireRequestObject"];
                result.SlidingRefreshTokenLifetime = (Int32)reader["SlidingRefreshTokenLifetime"];
                result.UpdateAccessTokenClaimsOnRefresh = (Boolean)reader["UpdateAccessTokenClaimsOnRefresh"];
                result.Updated = Convert.IsDBNull(reader["Updated"]) ? null : (DateTime?)reader["Updated"];
                result.UserCodeType = Convert.IsDBNull(reader["UserCodeType"]) ? null : (String)reader["UserCodeType"];
                result.UserSsoLifetime = Convert.IsDBNull(reader["UserSsoLifetime"]) ? null : (Int32?)reader["UserSsoLifetime"];
            }
            reader.Close();
            return result;
        }
        public async Task<ClientModel> InsertClient(ClientModel ClientModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `Clients` (`AbsoluteRefreshTokenLifetime`, `AccessTokenLifetime`, `AccessTokenType`, `AllowAccessTokensViaBrowser`, `AllowOfflineAccess`, `AllowPlainTextPkce`, `AllowRememberConsent`, `AllowedIdentityTokenSigningAlgorithms`, `AlwaysIncludeUserClaimsInIdToken`, `AlwaysSendClientClaims`, `AuthorizationCodeLifetime`, `BackChannelLogoutSessionRequired`, `BackChannelLogoutUri`, `ClientClaimsPrefix`, `ClientId`, `ClientName`, `ClientUri`, `ConsentLifetime`, `Created`, `Description`, `DeviceCodeLifetime`, `EnableLocalLogin`, `Enabled`, `FrontChannelLogoutSessionRequired`, `FrontChannelLogoutUri`, `IdentityTokenLifetime`, `IncludeJwtId`, `LastAccessed`, `LogoUri`, `NonEditable`, `PairWiseSubjectSalt`, `ProtocolType`, `RefreshTokenExpiration`, `RefreshTokenUsage`, `RequireClientSecret`, `RequireConsent`, `RequirePkce`, `RequireRequestObject`, `SlidingRefreshTokenLifetime`, `UpdateAccessTokenClaimsOnRefresh`, `Updated`, `UserCodeType`, `UserSsoLifetime`) VALUES (@AbsoluteRefreshTokenLifetime, @AccessTokenLifetime, @AccessTokenType, @AllowAccessTokensViaBrowser, @AllowOfflineAccess, @AllowPlainTextPkce, @AllowRememberConsent, @AllowedIdentityTokenSigningAlgorithms, @AlwaysIncludeUserClaimsInIdToken, @AlwaysSendClientClaims, @AuthorizationCodeLifetime, @BackChannelLogoutSessionRequired, @BackChannelLogoutUri, @ClientClaimsPrefix, @ClientId, @ClientName, @ClientUri, @ConsentLifetime, @Created, @Description, @DeviceCodeLifetime, @EnableLocalLogin, @Enabled, @FrontChannelLogoutSessionRequired, @FrontChannelLogoutUri, @IdentityTokenLifetime, @IncludeJwtId, @LastAccessed, @LogoUri, @NonEditable, @PairWiseSubjectSalt, @ProtocolType, @RefreshTokenExpiration, @RefreshTokenUsage, @RequireClientSecret, @RequireConsent, @RequirePkce, @RequireRequestObject, @SlidingRefreshTokenLifetime, @UpdateAccessTokenClaimsOnRefresh, @Updated, @UserCodeType, @UserSsoLifetime);
                SELECT * FROM `Clients` AS `c` WHERE `c`.`Id` = LAST_INSERT_ID()";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@AbsoluteRefreshTokenLifetime", ClientModel.AbsoluteRefreshTokenLifetime);
                cmd.Parameters.AddWithValue("@AccessTokenLifetime", ClientModel.AccessTokenLifetime);
                cmd.Parameters.AddWithValue("@AccessTokenType", ClientModel.AccessTokenType);
                cmd.Parameters.AddWithValue("@AllowAccessTokensViaBrowser", ClientModel.AllowAccessTokensViaBrowser);
                cmd.Parameters.AddWithValue("@AllowOfflineAccess", ClientModel.AllowOfflineAccess);
                cmd.Parameters.AddWithValue("@AllowPlainTextPkce", ClientModel.AllowPlainTextPkce);
                cmd.Parameters.AddWithValue("@AllowRememberConsent", ClientModel.AllowRememberConsent);
                cmd.Parameters.AddWithValue("@AllowedIdentityTokenSigningAlgorithms", ClientModel.AllowedIdentityTokenSigningAlgorithms);
                cmd.Parameters.AddWithValue("@AlwaysIncludeUserClaimsInIdToken", ClientModel.AlwaysIncludeUserClaimsInIdToken);
                cmd.Parameters.AddWithValue("@AlwaysSendClientClaims", ClientModel.AlwaysSendClientClaims);
                cmd.Parameters.AddWithValue("@AuthorizationCodeLifetime", ClientModel.AuthorizationCodeLifetime);
                cmd.Parameters.AddWithValue("@BackChannelLogoutSessionRequired", ClientModel.BackChannelLogoutSessionRequired);
                cmd.Parameters.AddWithValue("@BackChannelLogoutUri", ClientModel.BackChannelLogoutUri);
                cmd.Parameters.AddWithValue("@ClientClaimsPrefix", ClientModel.ClientClaimsPrefix);
                cmd.Parameters.AddWithValue("@ClientId", ClientModel.ClientId);
                cmd.Parameters.AddWithValue("@ClientName", ClientModel.ClientName);
                cmd.Parameters.AddWithValue("@ClientUri", ClientModel.ClientUri);
                cmd.Parameters.AddWithValue("@ConsentLifetime", ClientModel.ConsentLifetime);
                cmd.Parameters.AddWithValue("@Created", ClientModel.Created);
                cmd.Parameters.AddWithValue("@Description", ClientModel.Description);
                cmd.Parameters.AddWithValue("@DeviceCodeLifetime", ClientModel.DeviceCodeLifetime);
                cmd.Parameters.AddWithValue("@EnableLocalLogin", ClientModel.EnableLocalLogin);
                cmd.Parameters.AddWithValue("@Enabled", ClientModel.Enabled);
                cmd.Parameters.AddWithValue("@FrontChannelLogoutSessionRequired", ClientModel.FrontChannelLogoutSessionRequired);
                cmd.Parameters.AddWithValue("@FrontChannelLogoutUri", ClientModel.FrontChannelLogoutUri);
                cmd.Parameters.AddWithValue("@IdentityTokenLifetime", ClientModel.IdentityTokenLifetime);
                cmd.Parameters.AddWithValue("@IncludeJwtId", ClientModel.IncludeJwtId);
                cmd.Parameters.AddWithValue("@LastAccessed", ClientModel.LastAccessed);
                cmd.Parameters.AddWithValue("@LogoUri", ClientModel.LogoUri);
                cmd.Parameters.AddWithValue("@NonEditable", ClientModel.NonEditable);
                cmd.Parameters.AddWithValue("@PairWiseSubjectSalt", ClientModel.PairWiseSubjectSalt);
                cmd.Parameters.AddWithValue("@ProtocolType", ClientModel.ProtocolType);
                cmd.Parameters.AddWithValue("@RefreshTokenExpiration", ClientModel.RefreshTokenExpiration);
                cmd.Parameters.AddWithValue("@RefreshTokenUsage", ClientModel.RefreshTokenUsage);
                cmd.Parameters.AddWithValue("@RequireClientSecret", ClientModel.RequireClientSecret);
                cmd.Parameters.AddWithValue("@RequireConsent", ClientModel.RequireConsent);
                cmd.Parameters.AddWithValue("@RequirePkce", ClientModel.RequirePkce);
                cmd.Parameters.AddWithValue("@RequireRequestObject", ClientModel.RequireRequestObject);
                cmd.Parameters.AddWithValue("@SlidingRefreshTokenLifetime", ClientModel.SlidingRefreshTokenLifetime);
                cmd.Parameters.AddWithValue("@UpdateAccessTokenClaimsOnRefresh", ClientModel.UpdateAccessTokenClaimsOnRefresh);
                cmd.Parameters.AddWithValue("@Updated", ClientModel.Updated);
                cmd.Parameters.AddWithValue("@UserCodeType", ClientModel.UserCodeType);
                cmd.Parameters.AddWithValue("@UserSsoLifetime", ClientModel.UserSsoLifetime);
                return await GetClientResultSet(cmd, ClientModel);
            }
        }
        public async Task<int> UpdateClient(ClientModel ClientModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `Clients` AS `c` SET `c`.`AbsoluteRefreshTokenLifetime` = @AbsoluteRefreshTokenLifetime, `c`.`AccessTokenLifetime` = @AccessTokenLifetime, `c`.`AccessTokenType` = @AccessTokenType, `c`.`AllowAccessTokensViaBrowser` = @AllowAccessTokensViaBrowser, `c`.`AllowOfflineAccess` = @AllowOfflineAccess, `c`.`AllowPlainTextPkce` = @AllowPlainTextPkce, `c`.`AllowRememberConsent` = @AllowRememberConsent, `c`.`AllowedIdentityTokenSigningAlgorithms` = @AllowedIdentityTokenSigningAlgorithms, `c`.`AlwaysIncludeUserClaimsInIdToken` = @AlwaysIncludeUserClaimsInIdToken, `c`.`AlwaysSendClientClaims` = @AlwaysSendClientClaims, `c`.`AuthorizationCodeLifetime` = @AuthorizationCodeLifetime, `c`.`BackChannelLogoutSessionRequired` = @BackChannelLogoutSessionRequired, `c`.`BackChannelLogoutUri` = @BackChannelLogoutUri, `c`.`ClientClaimsPrefix` = @ClientClaimsPrefix, `c`.`ClientId` = @ClientId, `c`.`ClientName` = @ClientName, `c`.`ClientUri` = @ClientUri, `c`.`ConsentLifetime` = @ConsentLifetime, `c`.`Created` = @Created, `c`.`Description` = @Description, `c`.`DeviceCodeLifetime` = @DeviceCodeLifetime, `c`.`EnableLocalLogin` = @EnableLocalLogin, `c`.`Enabled` = @Enabled, `c`.`FrontChannelLogoutSessionRequired` = @FrontChannelLogoutSessionRequired, `c`.`FrontChannelLogoutUri` = @FrontChannelLogoutUri, `c`.`IdentityTokenLifetime` = @IdentityTokenLifetime, `c`.`IncludeJwtId` = @IncludeJwtId, `c`.`LastAccessed` = @LastAccessed, `c`.`LogoUri` = @LogoUri, `c`.`NonEditable` = @NonEditable, `c`.`PairWiseSubjectSalt` = @PairWiseSubjectSalt, `c`.`ProtocolType` = @ProtocolType, `c`.`RefreshTokenExpiration` = @RefreshTokenExpiration, `c`.`RefreshTokenUsage` = @RefreshTokenUsage, `c`.`RequireClientSecret` = @RequireClientSecret, `c`.`RequireConsent` = @RequireConsent, `c`.`RequirePkce` = @RequirePkce, `c`.`RequireRequestObject` = @RequireRequestObject, `c`.`SlidingRefreshTokenLifetime` = @SlidingRefreshTokenLifetime, `c`.`UpdateAccessTokenClaimsOnRefresh` = @UpdateAccessTokenClaimsOnRefresh, `c`.`Updated` = @Updated, `c`.`UserCodeType` = @UserCodeType, `c`.`UserSsoLifetime` = @UserSsoLifetime WHERE `c`.`Id` = @Id;";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", ClientModel.Id);
                cmd.Parameters.AddWithValue("@AbsoluteRefreshTokenLifetime", ClientModel.AbsoluteRefreshTokenLifetime);
                cmd.Parameters.AddWithValue("@AccessTokenLifetime", ClientModel.AccessTokenLifetime);
                cmd.Parameters.AddWithValue("@AccessTokenType", ClientModel.AccessTokenType);
                cmd.Parameters.AddWithValue("@AllowAccessTokensViaBrowser", ClientModel.AllowAccessTokensViaBrowser);
                cmd.Parameters.AddWithValue("@AllowOfflineAccess", ClientModel.AllowOfflineAccess);
                cmd.Parameters.AddWithValue("@AllowPlainTextPkce", ClientModel.AllowPlainTextPkce);
                cmd.Parameters.AddWithValue("@AllowRememberConsent", ClientModel.AllowRememberConsent);
                cmd.Parameters.AddWithValue("@AllowedIdentityTokenSigningAlgorithms", ClientModel.AllowedIdentityTokenSigningAlgorithms);
                cmd.Parameters.AddWithValue("@AlwaysIncludeUserClaimsInIdToken", ClientModel.AlwaysIncludeUserClaimsInIdToken);
                cmd.Parameters.AddWithValue("@AlwaysSendClientClaims", ClientModel.AlwaysSendClientClaims);
                cmd.Parameters.AddWithValue("@AuthorizationCodeLifetime", ClientModel.AuthorizationCodeLifetime);
                cmd.Parameters.AddWithValue("@BackChannelLogoutSessionRequired", ClientModel.BackChannelLogoutSessionRequired);
                cmd.Parameters.AddWithValue("@BackChannelLogoutUri", ClientModel.BackChannelLogoutUri);
                cmd.Parameters.AddWithValue("@ClientClaimsPrefix", ClientModel.ClientClaimsPrefix);
                cmd.Parameters.AddWithValue("@ClientId", ClientModel.ClientId);
                cmd.Parameters.AddWithValue("@ClientName", ClientModel.ClientName);
                cmd.Parameters.AddWithValue("@ClientUri", ClientModel.ClientUri);
                cmd.Parameters.AddWithValue("@ConsentLifetime", ClientModel.ConsentLifetime);
                cmd.Parameters.AddWithValue("@Created", ClientModel.Created);
                cmd.Parameters.AddWithValue("@Description", ClientModel.Description);
                cmd.Parameters.AddWithValue("@DeviceCodeLifetime", ClientModel.DeviceCodeLifetime);
                cmd.Parameters.AddWithValue("@EnableLocalLogin", ClientModel.EnableLocalLogin);
                cmd.Parameters.AddWithValue("@Enabled", ClientModel.Enabled);
                cmd.Parameters.AddWithValue("@FrontChannelLogoutSessionRequired", ClientModel.FrontChannelLogoutSessionRequired);
                cmd.Parameters.AddWithValue("@FrontChannelLogoutUri", ClientModel.FrontChannelLogoutUri);
                cmd.Parameters.AddWithValue("@IdentityTokenLifetime", ClientModel.IdentityTokenLifetime);
                cmd.Parameters.AddWithValue("@IncludeJwtId", ClientModel.IncludeJwtId);
                cmd.Parameters.AddWithValue("@LastAccessed", ClientModel.LastAccessed);
                cmd.Parameters.AddWithValue("@LogoUri", ClientModel.LogoUri);
                cmd.Parameters.AddWithValue("@NonEditable", ClientModel.NonEditable);
                cmd.Parameters.AddWithValue("@PairWiseSubjectSalt", ClientModel.PairWiseSubjectSalt);
                cmd.Parameters.AddWithValue("@ProtocolType", ClientModel.ProtocolType);
                cmd.Parameters.AddWithValue("@RefreshTokenExpiration", ClientModel.RefreshTokenExpiration);
                cmd.Parameters.AddWithValue("@RefreshTokenUsage", ClientModel.RefreshTokenUsage);
                cmd.Parameters.AddWithValue("@RequireClientSecret", ClientModel.RequireClientSecret);
                cmd.Parameters.AddWithValue("@RequireConsent", ClientModel.RequireConsent);
                cmd.Parameters.AddWithValue("@RequirePkce", ClientModel.RequirePkce);
                cmd.Parameters.AddWithValue("@RequireRequestObject", ClientModel.RequireRequestObject);
                cmd.Parameters.AddWithValue("@SlidingRefreshTokenLifetime", ClientModel.SlidingRefreshTokenLifetime);
                cmd.Parameters.AddWithValue("@UpdateAccessTokenClaimsOnRefresh", ClientModel.UpdateAccessTokenClaimsOnRefresh);
                cmd.Parameters.AddWithValue("@Updated", ClientModel.Updated);
                cmd.Parameters.AddWithValue("@UserCodeType", ClientModel.UserCodeType);
                cmd.Parameters.AddWithValue("@UserSsoLifetime", ClientModel.UserSsoLifetime);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeleteClient(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `Clients` AS `c` WHERE `c`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<ClientCorsOriginModel> SelectClientCorsOrigin(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT * FROM `ClientCorsOrigins` AS `c` WHERE `c`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await GetClientCorsOriginResultSet(cmd);
            }
        }
        private async Task<ClientCorsOriginModel> GetClientCorsOriginResultSet(MySqlCommand cmd, ClientCorsOriginModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new ClientCorsOriginModel();
                result.Id = (Int32)reader["Id"];
                result.ClientId = (Int32)reader["ClientId"];
                result.Origin = (String)reader["Origin"];
            }
            reader.Close();
            return result;
        }
        public async Task<ClientCorsOriginModel> InsertClientCorsOrigin(ClientCorsOriginModel ClientCorsOriginModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `ClientCorsOrigins` (`ClientId`, `Origin`) VALUES (@ClientId, @Origin);
                SELECT * FROM `ClientCorsOrigins` AS `c` WHERE `c`.`Id` = LAST_INSERT_ID()";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@ClientId", ClientCorsOriginModel.ClientId);
                cmd.Parameters.AddWithValue("@Origin", ClientCorsOriginModel.Origin);
                return await GetClientCorsOriginResultSet(cmd, ClientCorsOriginModel);
            }
        }
        public async Task<int> UpdateClientCorsOrigin(ClientCorsOriginModel ClientCorsOriginModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `ClientCorsOrigins` AS `c` SET `c`.`ClientId` = @ClientId, `c`.`Origin` = @Origin WHERE `c`.`Id` = @Id;";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", ClientCorsOriginModel.Id);
                cmd.Parameters.AddWithValue("@ClientId", ClientCorsOriginModel.ClientId);
                cmd.Parameters.AddWithValue("@Origin", ClientCorsOriginModel.Origin);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeleteClientCorsOrigin(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `ClientCorsOrigins` AS `c` WHERE `c`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<IdentityResourceModel> SelectIdentityResource(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT * FROM `IdentityResources` AS `i` WHERE `i`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await GetIdentityResourceResultSet(cmd);
            }
        }
        private async Task<IdentityResourceModel> GetIdentityResourceResultSet(MySqlCommand cmd, IdentityResourceModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new IdentityResourceModel();
                result.Id = (Int32)reader["Id"];
                result.Created = (DateTime)reader["Created"];
                result.Description = Convert.IsDBNull(reader["Description"]) ? null : (String)reader["Description"];
                result.DisplayName = Convert.IsDBNull(reader["DisplayName"]) ? null : (String)reader["DisplayName"];
                result.Emphasize = (Boolean)reader["Emphasize"];
                result.Enabled = (Boolean)reader["Enabled"];
                result.Name = (String)reader["Name"];
                result.NonEditable = (Boolean)reader["NonEditable"];
                result.Required = (Boolean)reader["Required"];
                result.ShowInDiscoveryDocument = (Boolean)reader["ShowInDiscoveryDocument"];
                result.Updated = Convert.IsDBNull(reader["Updated"]) ? null : (DateTime?)reader["Updated"];
            }
            reader.Close();
            return result;
        }
        public async Task<IdentityResourceModel> InsertIdentityResource(IdentityResourceModel IdentityResourceModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `IdentityResources` (`Created`, `Description`, `DisplayName`, `Emphasize`, `Enabled`, `Name`, `NonEditable`, `Required`, `ShowInDiscoveryDocument`, `Updated`) VALUES (@Created, @Description, @DisplayName, @Emphasize, @Enabled, @Name, @NonEditable, @Required, @ShowInDiscoveryDocument, @Updated);
                SELECT * FROM `IdentityResources` AS `i` WHERE `i`.`Id` = LAST_INSERT_ID()";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Created", IdentityResourceModel.Created);
                cmd.Parameters.AddWithValue("@Description", IdentityResourceModel.Description);
                cmd.Parameters.AddWithValue("@DisplayName", IdentityResourceModel.DisplayName);
                cmd.Parameters.AddWithValue("@Emphasize", IdentityResourceModel.Emphasize);
                cmd.Parameters.AddWithValue("@Enabled", IdentityResourceModel.Enabled);
                cmd.Parameters.AddWithValue("@Name", IdentityResourceModel.Name);
                cmd.Parameters.AddWithValue("@NonEditable", IdentityResourceModel.NonEditable);
                cmd.Parameters.AddWithValue("@Required", IdentityResourceModel.Required);
                cmd.Parameters.AddWithValue("@ShowInDiscoveryDocument", IdentityResourceModel.ShowInDiscoveryDocument);
                cmd.Parameters.AddWithValue("@Updated", IdentityResourceModel.Updated);
                return await GetIdentityResourceResultSet(cmd, IdentityResourceModel);
            }
        }
        public async Task<int> UpdateIdentityResource(IdentityResourceModel IdentityResourceModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `IdentityResources` AS `i` SET `i`.`Created` = @Created, `i`.`Description` = @Description, `i`.`DisplayName` = @DisplayName, `i`.`Emphasize` = @Emphasize, `i`.`Enabled` = @Enabled, `i`.`Name` = @Name, `i`.`NonEditable` = @NonEditable, `i`.`Required` = @Required, `i`.`ShowInDiscoveryDocument` = @ShowInDiscoveryDocument, `i`.`Updated` = @Updated WHERE `i`.`Id` = @Id;";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", IdentityResourceModel.Id);
                cmd.Parameters.AddWithValue("@Created", IdentityResourceModel.Created);
                cmd.Parameters.AddWithValue("@Description", IdentityResourceModel.Description);
                cmd.Parameters.AddWithValue("@DisplayName", IdentityResourceModel.DisplayName);
                cmd.Parameters.AddWithValue("@Emphasize", IdentityResourceModel.Emphasize);
                cmd.Parameters.AddWithValue("@Enabled", IdentityResourceModel.Enabled);
                cmd.Parameters.AddWithValue("@Name", IdentityResourceModel.Name);
                cmd.Parameters.AddWithValue("@NonEditable", IdentityResourceModel.NonEditable);
                cmd.Parameters.AddWithValue("@Required", IdentityResourceModel.Required);
                cmd.Parameters.AddWithValue("@ShowInDiscoveryDocument", IdentityResourceModel.ShowInDiscoveryDocument);
                cmd.Parameters.AddWithValue("@Updated", IdentityResourceModel.Updated);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeleteIdentityResource(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `IdentityResources` AS `i` WHERE `i`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<ApiResourceModel> SelectApiResource(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT * FROM `ApiResources` AS `a` WHERE `a`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await GetApiResourceResultSet(cmd);
            }
        }
        private async Task<ApiResourceModel> GetApiResourceResultSet(MySqlCommand cmd, ApiResourceModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new ApiResourceModel();
                result.Id = (Int32)reader["Id"];
                result.AllowedAccessTokenSigningAlgorithms = Convert.IsDBNull(reader["AllowedAccessTokenSigningAlgorithms"]) ? null : (String)reader["AllowedAccessTokenSigningAlgorithms"];
                result.Created = (DateTime)reader["Created"];
                result.Description = Convert.IsDBNull(reader["Description"]) ? null : (String)reader["Description"];
                result.DisplayName = Convert.IsDBNull(reader["DisplayName"]) ? null : (String)reader["DisplayName"];
                result.Enabled = (Boolean)reader["Enabled"];
                result.LastAccessed = Convert.IsDBNull(reader["LastAccessed"]) ? null : (DateTime?)reader["LastAccessed"];
                result.Name = (String)reader["Name"];
                result.NonEditable = (Boolean)reader["NonEditable"];
                result.ShowInDiscoveryDocument = (Boolean)reader["ShowInDiscoveryDocument"];
                result.Updated = Convert.IsDBNull(reader["Updated"]) ? null : (DateTime?)reader["Updated"];
            }
            reader.Close();
            return result;
        }
        public async Task<ApiResourceModel> InsertApiResource(ApiResourceModel ApiResourceModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `ApiResources` (`AllowedAccessTokenSigningAlgorithms`, `Created`, `Description`, `DisplayName`, `Enabled`, `LastAccessed`, `Name`, `NonEditable`, `ShowInDiscoveryDocument`, `Updated`) VALUES (@AllowedAccessTokenSigningAlgorithms, @Created, @Description, @DisplayName, @Enabled, @LastAccessed, @Name, @NonEditable, @ShowInDiscoveryDocument, @Updated);
                SELECT * FROM `ApiResources` AS `a` WHERE `a`.`Id` = LAST_INSERT_ID()";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@AllowedAccessTokenSigningAlgorithms", ApiResourceModel.AllowedAccessTokenSigningAlgorithms);
                cmd.Parameters.AddWithValue("@Created", ApiResourceModel.Created);
                cmd.Parameters.AddWithValue("@Description", ApiResourceModel.Description);
                cmd.Parameters.AddWithValue("@DisplayName", ApiResourceModel.DisplayName);
                cmd.Parameters.AddWithValue("@Enabled", ApiResourceModel.Enabled);
                cmd.Parameters.AddWithValue("@LastAccessed", ApiResourceModel.LastAccessed);
                cmd.Parameters.AddWithValue("@Name", ApiResourceModel.Name);
                cmd.Parameters.AddWithValue("@NonEditable", ApiResourceModel.NonEditable);
                cmd.Parameters.AddWithValue("@ShowInDiscoveryDocument", ApiResourceModel.ShowInDiscoveryDocument);
                cmd.Parameters.AddWithValue("@Updated", ApiResourceModel.Updated);
                return await GetApiResourceResultSet(cmd, ApiResourceModel);
            }
        }
        public async Task<int> UpdateApiResource(ApiResourceModel ApiResourceModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `ApiResources` AS `a` SET `a`.`AllowedAccessTokenSigningAlgorithms` = @AllowedAccessTokenSigningAlgorithms, `a`.`Created` = @Created, `a`.`Description` = @Description, `a`.`DisplayName` = @DisplayName, `a`.`Enabled` = @Enabled, `a`.`LastAccessed` = @LastAccessed, `a`.`Name` = @Name, `a`.`NonEditable` = @NonEditable, `a`.`ShowInDiscoveryDocument` = @ShowInDiscoveryDocument, `a`.`Updated` = @Updated WHERE `a`.`Id` = @Id;";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", ApiResourceModel.Id);
                cmd.Parameters.AddWithValue("@AllowedAccessTokenSigningAlgorithms", ApiResourceModel.AllowedAccessTokenSigningAlgorithms);
                cmd.Parameters.AddWithValue("@Created", ApiResourceModel.Created);
                cmd.Parameters.AddWithValue("@Description", ApiResourceModel.Description);
                cmd.Parameters.AddWithValue("@DisplayName", ApiResourceModel.DisplayName);
                cmd.Parameters.AddWithValue("@Enabled", ApiResourceModel.Enabled);
                cmd.Parameters.AddWithValue("@LastAccessed", ApiResourceModel.LastAccessed);
                cmd.Parameters.AddWithValue("@Name", ApiResourceModel.Name);
                cmd.Parameters.AddWithValue("@NonEditable", ApiResourceModel.NonEditable);
                cmd.Parameters.AddWithValue("@ShowInDiscoveryDocument", ApiResourceModel.ShowInDiscoveryDocument);
                cmd.Parameters.AddWithValue("@Updated", ApiResourceModel.Updated);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeleteApiResource(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `ApiResources` AS `a` WHERE `a`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<ApiScopeModel> SelectApiScope(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT * FROM `ApiScopes` AS `a` WHERE `a`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await GetApiScopeResultSet(cmd);
            }
        }
        private async Task<ApiScopeModel> GetApiScopeResultSet(MySqlCommand cmd, ApiScopeModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new ApiScopeModel();
                result.Id = (Int32)reader["Id"];
                result.Description = Convert.IsDBNull(reader["Description"]) ? null : (String)reader["Description"];
                result.DisplayName = Convert.IsDBNull(reader["DisplayName"]) ? null : (String)reader["DisplayName"];
                result.Emphasize = (Boolean)reader["Emphasize"];
                result.Enabled = (Boolean)reader["Enabled"];
                result.Name = (String)reader["Name"];
                result.Required = (Boolean)reader["Required"];
                result.ShowInDiscoveryDocument = (Boolean)reader["ShowInDiscoveryDocument"];
            }
            reader.Close();
            return result;
        }
        public async Task<ApiScopeModel> InsertApiScope(ApiScopeModel ApiScopeModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `ApiScopes` (`Description`, `DisplayName`, `Emphasize`, `Enabled`, `Name`, `Required`, `ShowInDiscoveryDocument`) VALUES (@Description, @DisplayName, @Emphasize, @Enabled, @Name, @Required, @ShowInDiscoveryDocument);
                SELECT * FROM `ApiScopes` AS `a` WHERE `a`.`Id` = LAST_INSERT_ID()";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Description", ApiScopeModel.Description);
                cmd.Parameters.AddWithValue("@DisplayName", ApiScopeModel.DisplayName);
                cmd.Parameters.AddWithValue("@Emphasize", ApiScopeModel.Emphasize);
                cmd.Parameters.AddWithValue("@Enabled", ApiScopeModel.Enabled);
                cmd.Parameters.AddWithValue("@Name", ApiScopeModel.Name);
                cmd.Parameters.AddWithValue("@Required", ApiScopeModel.Required);
                cmd.Parameters.AddWithValue("@ShowInDiscoveryDocument", ApiScopeModel.ShowInDiscoveryDocument);
                return await GetApiScopeResultSet(cmd, ApiScopeModel);
            }
        }
        public async Task<int> UpdateApiScope(ApiScopeModel ApiScopeModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `ApiScopes` AS `a` SET `a`.`Description` = @Description, `a`.`DisplayName` = @DisplayName, `a`.`Emphasize` = @Emphasize, `a`.`Enabled` = @Enabled, `a`.`Name` = @Name, `a`.`Required` = @Required, `a`.`ShowInDiscoveryDocument` = @ShowInDiscoveryDocument WHERE `a`.`Id` = @Id;";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", ApiScopeModel.Id);
                cmd.Parameters.AddWithValue("@Description", ApiScopeModel.Description);
                cmd.Parameters.AddWithValue("@DisplayName", ApiScopeModel.DisplayName);
                cmd.Parameters.AddWithValue("@Emphasize", ApiScopeModel.Emphasize);
                cmd.Parameters.AddWithValue("@Enabled", ApiScopeModel.Enabled);
                cmd.Parameters.AddWithValue("@Name", ApiScopeModel.Name);
                cmd.Parameters.AddWithValue("@Required", ApiScopeModel.Required);
                cmd.Parameters.AddWithValue("@ShowInDiscoveryDocument", ApiScopeModel.ShowInDiscoveryDocument);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeleteApiScope(Int32 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `ApiScopes` AS `a` WHERE `a`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<PersistedGrantModel> SelectPersistedGrant(String Key)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT * FROM `PersistedGrants` AS `p` WHERE `p`.`Key` = @Key";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Key", Key);
                return await GetPersistedGrantResultSet(cmd);
            }
        }
        private async Task<PersistedGrantModel> GetPersistedGrantResultSet(MySqlCommand cmd, PersistedGrantModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new PersistedGrantModel();
                result.Key = (String)reader["Key"];
                result.ClientId = (String)reader["ClientId"];
                result.ConsumedTime = Convert.IsDBNull(reader["ConsumedTime"]) ? null : (DateTime?)reader["ConsumedTime"];
                result.CreationTime = (DateTime)reader["CreationTime"];
                result.Data = (String)reader["Data"];
                result.Description = Convert.IsDBNull(reader["Description"]) ? null : (String)reader["Description"];
                result.Expiration = Convert.IsDBNull(reader["Expiration"]) ? null : (DateTime?)reader["Expiration"];
                result.SessionId = Convert.IsDBNull(reader["SessionId"]) ? null : (String)reader["SessionId"];
                result.SubjectId = Convert.IsDBNull(reader["SubjectId"]) ? null : (String)reader["SubjectId"];
                result.Type = (String)reader["Type"];
            }
            reader.Close();
            return result;
        }
        public async Task<PersistedGrantModel> InsertPersistedGrant(PersistedGrantModel PersistedGrantModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `PersistedGrants` (`Key`, `ClientId`, `ConsumedTime`, `CreationTime`, `Data`, `Description`, `Expiration`, `SessionId`, `SubjectId`, `Type`) VALUES (@Key, @ClientId, @ConsumedTime, @CreationTime, @Data, @Description, @Expiration, @SessionId, @SubjectId, @Type);
                SELECT * FROM `PersistedGrants` AS `p` WHERE `p`.`Key` = @Key";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Key", PersistedGrantModel.Key);
                cmd.Parameters.AddWithValue("@ClientId", PersistedGrantModel.ClientId);
                cmd.Parameters.AddWithValue("@ConsumedTime", PersistedGrantModel.ConsumedTime);
                cmd.Parameters.AddWithValue("@CreationTime", PersistedGrantModel.CreationTime);
                cmd.Parameters.AddWithValue("@Data", PersistedGrantModel.Data);
                cmd.Parameters.AddWithValue("@Description", PersistedGrantModel.Description);
                cmd.Parameters.AddWithValue("@Expiration", PersistedGrantModel.Expiration);
                cmd.Parameters.AddWithValue("@SessionId", PersistedGrantModel.SessionId);
                cmd.Parameters.AddWithValue("@SubjectId", PersistedGrantModel.SubjectId);
                cmd.Parameters.AddWithValue("@Type", PersistedGrantModel.Type);
                return await GetPersistedGrantResultSet(cmd, PersistedGrantModel);
            }
        }
        public async Task<int> UpdatePersistedGrant(PersistedGrantModel PersistedGrantModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `PersistedGrants` AS `p` SET `p`.`ClientId` = @ClientId, `p`.`ConsumedTime` = @ConsumedTime, `p`.`CreationTime` = @CreationTime, `p`.`Data` = @Data, `p`.`Description` = @Description, `p`.`Expiration` = @Expiration, `p`.`SessionId` = @SessionId, `p`.`SubjectId` = @SubjectId, `p`.`Type` = @Type WHERE `p`.`Key` = @Key;";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Key", PersistedGrantModel.Key);
                cmd.Parameters.AddWithValue("@ClientId", PersistedGrantModel.ClientId);
                cmd.Parameters.AddWithValue("@ConsumedTime", PersistedGrantModel.ConsumedTime);
                cmd.Parameters.AddWithValue("@CreationTime", PersistedGrantModel.CreationTime);
                cmd.Parameters.AddWithValue("@Data", PersistedGrantModel.Data);
                cmd.Parameters.AddWithValue("@Description", PersistedGrantModel.Description);
                cmd.Parameters.AddWithValue("@Expiration", PersistedGrantModel.Expiration);
                cmd.Parameters.AddWithValue("@SessionId", PersistedGrantModel.SessionId);
                cmd.Parameters.AddWithValue("@SubjectId", PersistedGrantModel.SubjectId);
                cmd.Parameters.AddWithValue("@Type", PersistedGrantModel.Type);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeletePersistedGrant(String Key)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `PersistedGrants` AS `p` WHERE `p`.`Key` = @Key";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Key", Key);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<DeviceFlowCodesModel> SelectDeviceFlowCodes(String UserCode)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT * FROM `DeviceFlowCodes` AS `d` WHERE `d`.`UserCode` = @UserCode";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@UserCode", UserCode);
                return await GetDeviceFlowCodesResultSet(cmd);
            }
        }
        private async Task<DeviceFlowCodesModel> GetDeviceFlowCodesResultSet(MySqlCommand cmd, DeviceFlowCodesModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new DeviceFlowCodesModel();
                result.UserCode = (String)reader["UserCode"];
                result.ClientId = (String)reader["ClientId"];
                result.CreationTime = (DateTime)reader["CreationTime"];
                result.Data = (String)reader["Data"];
                result.Description = Convert.IsDBNull(reader["Description"]) ? null : (String)reader["Description"];
                result.DeviceCode = (String)reader["DeviceCode"];
                result.Expiration = (DateTime)reader["Expiration"];
                result.SessionId = Convert.IsDBNull(reader["SessionId"]) ? null : (String)reader["SessionId"];
                result.SubjectId = Convert.IsDBNull(reader["SubjectId"]) ? null : (String)reader["SubjectId"];
            }
            reader.Close();
            return result;
        }
        public async Task<DeviceFlowCodesModel> InsertDeviceFlowCodes(DeviceFlowCodesModel DeviceFlowCodesModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `DeviceFlowCodes` (`UserCode`, `ClientId`, `CreationTime`, `Data`, `Description`, `DeviceCode`, `Expiration`, `SessionId`, `SubjectId`) VALUES (@UserCode, @ClientId, @CreationTime, @Data, @Description, @DeviceCode, @Expiration, @SessionId, @SubjectId);
                SELECT * FROM `DeviceFlowCodes` AS `d` WHERE `d`.`UserCode` = @UserCode";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@UserCode", DeviceFlowCodesModel.UserCode);
                cmd.Parameters.AddWithValue("@ClientId", DeviceFlowCodesModel.ClientId);
                cmd.Parameters.AddWithValue("@CreationTime", DeviceFlowCodesModel.CreationTime);
                cmd.Parameters.AddWithValue("@Data", DeviceFlowCodesModel.Data);
                cmd.Parameters.AddWithValue("@Description", DeviceFlowCodesModel.Description);
                cmd.Parameters.AddWithValue("@DeviceCode", DeviceFlowCodesModel.DeviceCode);
                cmd.Parameters.AddWithValue("@Expiration", DeviceFlowCodesModel.Expiration);
                cmd.Parameters.AddWithValue("@SessionId", DeviceFlowCodesModel.SessionId);
                cmd.Parameters.AddWithValue("@SubjectId", DeviceFlowCodesModel.SubjectId);
                return await GetDeviceFlowCodesResultSet(cmd, DeviceFlowCodesModel);
            }
        }
        public async Task<int> UpdateDeviceFlowCodes(DeviceFlowCodesModel DeviceFlowCodesModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `DeviceFlowCodes` AS `d` SET `d`.`ClientId` = @ClientId, `d`.`CreationTime` = @CreationTime, `d`.`Data` = @Data, `d`.`Description` = @Description, `d`.`DeviceCode` = @DeviceCode, `d`.`Expiration` = @Expiration, `d`.`SessionId` = @SessionId, `d`.`SubjectId` = @SubjectId WHERE `d`.`UserCode` = @UserCode;";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@UserCode", DeviceFlowCodesModel.UserCode);
                cmd.Parameters.AddWithValue("@ClientId", DeviceFlowCodesModel.ClientId);
                cmd.Parameters.AddWithValue("@CreationTime", DeviceFlowCodesModel.CreationTime);
                cmd.Parameters.AddWithValue("@Data", DeviceFlowCodesModel.Data);
                cmd.Parameters.AddWithValue("@Description", DeviceFlowCodesModel.Description);
                cmd.Parameters.AddWithValue("@DeviceCode", DeviceFlowCodesModel.DeviceCode);
                cmd.Parameters.AddWithValue("@Expiration", DeviceFlowCodesModel.Expiration);
                cmd.Parameters.AddWithValue("@SessionId", DeviceFlowCodesModel.SessionId);
                cmd.Parameters.AddWithValue("@SubjectId", DeviceFlowCodesModel.SubjectId);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeleteDeviceFlowCodes(String UserCode)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `DeviceFlowCodes` AS `d` WHERE `d`.`UserCode` = @UserCode";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@UserCode", UserCode);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
    }
}

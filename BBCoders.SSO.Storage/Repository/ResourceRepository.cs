//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using MySqlConnector;

namespace BBCoders.SSO.Storage
{
    public class ResourceRepository
    {
        private readonly string _connectionString;
        public ResourceRepository(string connectionString){ this._connectionString = connectionString; }
        public async Task<List<GetAllIdentityResourcesAsyncResponseModel>> GetAllIdentityResourcesAsync(GetAllIdentityResourcesAsyncRequestModel GetAllIdentityResourcesAsyncRequestModel)
        {
            string sql = @"SELECT `i`.`Id`, `i`.`Created`, `i`.`Description`, `i`.`DisplayName`, `i`.`Emphasize`, `i`.`Enabled`, `i`.`Name`, `i`.`NonEditable`, `i`.`Required`, `i`.`ShowInDiscoveryDocument`, `i`.`Updated`, `i0`.`Id`, `i0`.`IdentityResourceId`, `i0`.`Type`, `i1`.`Id`, `i1`.`IdentityResourceId`, `i1`.`Key`, `i1`.`Value`
				FROM `IdentityResources` AS `i`
				LEFT JOIN `IdentityResourceClaims` AS `i0` ON `i`.`Id` = `i0`.`IdentityResourceId`
				LEFT JOIN `IdentityResourceProperties` AS `i1` ON `i`.`Id` = `i1`.`IdentityResourceId`
				ORDER BY `i`.`Id`, `i0`.`Id`, `i1`.`Id`";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                List<GetAllIdentityResourcesAsyncResponseModel> results = new List<GetAllIdentityResourcesAsyncResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetAllIdentityResourcesAsyncResponseModel result = new GetAllIdentityResourcesAsyncResponseModel();
                    result.IdentityResourceId = (Int32)reader[0];
                    result.IdentityResourceCreated = (DateTime)reader[1];
                    result.IdentityResourceDescription = Convert.IsDBNull(reader[2]) ? null : (String)reader[2];
                    result.IdentityResourceDisplayName = Convert.IsDBNull(reader[3]) ? null : (String)reader[3];
                    result.IdentityResourceEmphasize = (Boolean)reader[4];
                    result.IdentityResourceEnabled = (Boolean)reader[5];
                    result.IdentityResourceName = (String)reader[6];
                    result.IdentityResourceNonEditable = (Boolean)reader[7];
                    result.IdentityResourceRequired = (Boolean)reader[8];
                    result.IdentityResourceShowInDiscoveryDocument = (Boolean)reader[9];
                    result.IdentityResourceUpdated = Convert.IsDBNull(reader[10]) ? null : (DateTime?)reader[10];
                    result.IdentityResourceClaimId = Convert.IsDBNull(reader[11]) ? null : (Int32?)reader[11];
                    result.IdentityResourceClaimIdentityResourceId = Convert.IsDBNull(reader[12]) ? null : (Int32?)reader[12];
                    result.IdentityResourceClaimType = Convert.IsDBNull(reader[13]) ? null : (String)reader[13];
                    result.IdentityResourcePropertyId = Convert.IsDBNull(reader[14]) ? null : (Int32?)reader[14];
                    result.IdentityResourcePropertyIdentityResourceId = Convert.IsDBNull(reader[15]) ? null : (Int32?)reader[15];
                    result.IdentityResourcePropertyKey = Convert.IsDBNull(reader[16]) ? null : (String)reader[16];
                    result.IdentityResourcePropertyValue = Convert.IsDBNull(reader[17]) ? null : (String)reader[17];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
        public async Task<List<GetAllApiResourcesAsyncResponseModel>> GetAllApiResourcesAsync(GetAllApiResourcesAsyncRequestModel GetAllApiResourcesAsyncRequestModel)
        {
            string sql = @"SELECT `a`.`Id`, `a`.`AllowedAccessTokenSigningAlgorithms`, `a`.`Created`, `a`.`Description`, `a`.`DisplayName`, `a`.`Enabled`, `a`.`LastAccessed`, `a`.`Name`, `a`.`NonEditable`, `a`.`ShowInDiscoveryDocument`, `a`.`Updated`, `a0`.`Id`, `a0`.`ApiResourceId`, `a0`.`Created`, `a0`.`Description`, `a0`.`Expiration`, `a0`.`Type`, `a0`.`Value`, `a1`.`Id`, `a1`.`ApiResourceId`, `a1`.`Scope`, `a2`.`Id`, `a2`.`ApiResourceId`, `a2`.`Type`, `a3`.`Id`, `a3`.`ApiResourceId`, `a3`.`Key`, `a3`.`Value`
				FROM `ApiResources` AS `a`
				LEFT JOIN `ApiResourceSecrets` AS `a0` ON `a`.`Id` = `a0`.`ApiResourceId`
				LEFT JOIN `ApiResourceScopes` AS `a1` ON `a`.`Id` = `a1`.`ApiResourceId`
				LEFT JOIN `ApiResourceClaims` AS `a2` ON `a`.`Id` = `a2`.`ApiResourceId`
				LEFT JOIN `ApiResourceProperties` AS `a3` ON `a`.`Id` = `a3`.`ApiResourceId`
				ORDER BY `a`.`Id`, `a0`.`Id`, `a1`.`Id`, `a2`.`Id`, `a3`.`Id`";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                List<GetAllApiResourcesAsyncResponseModel> results = new List<GetAllApiResourcesAsyncResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetAllApiResourcesAsyncResponseModel result = new GetAllApiResourcesAsyncResponseModel();
                    result.ApiResourceId = (Int32)reader[0];
                    result.ApiResourceAllowedAccessTokenSigningAlgorithms = Convert.IsDBNull(reader[1]) ? null : (String)reader[1];
                    result.ApiResourceCreated = (DateTime)reader[2];
                    result.ApiResourceDescription = Convert.IsDBNull(reader[3]) ? null : (String)reader[3];
                    result.ApiResourceDisplayName = Convert.IsDBNull(reader[4]) ? null : (String)reader[4];
                    result.ApiResourceEnabled = (Boolean)reader[5];
                    result.ApiResourceLastAccessed = Convert.IsDBNull(reader[6]) ? null : (DateTime?)reader[6];
                    result.ApiResourceName = (String)reader[7];
                    result.ApiResourceNonEditable = (Boolean)reader[8];
                    result.ApiResourceShowInDiscoveryDocument = (Boolean)reader[9];
                    result.ApiResourceUpdated = Convert.IsDBNull(reader[10]) ? null : (DateTime?)reader[10];
                    result.ApiResourceSecretId = Convert.IsDBNull(reader[11]) ? null : (Int32?)reader[11];
                    result.ApiResourceSecretApiResourceId = Convert.IsDBNull(reader[12]) ? null : (Int32?)reader[12];
                    result.ApiResourceSecretCreated = Convert.IsDBNull(reader[13]) ? null : (DateTime?)reader[13];
                    result.ApiResourceSecretDescription = Convert.IsDBNull(reader[14]) ? null : (String)reader[14];
                    result.ApiResourceSecretExpiration = Convert.IsDBNull(reader[15]) ? null : (DateTime?)reader[15];
                    result.ApiResourceSecretType = Convert.IsDBNull(reader[16]) ? null : (String)reader[16];
                    result.ApiResourceSecretValue = Convert.IsDBNull(reader[17]) ? null : (String)reader[17];
                    result.ApiResourceScopeId = Convert.IsDBNull(reader[18]) ? null : (Int32?)reader[18];
                    result.ApiResourceScopeApiResourceId = Convert.IsDBNull(reader[19]) ? null : (Int32?)reader[19];
                    result.ApiResourceScopeScope = Convert.IsDBNull(reader[20]) ? null : (String)reader[20];
                    result.ApiResourceClaimId = Convert.IsDBNull(reader[21]) ? null : (Int32?)reader[21];
                    result.ApiResourceClaimApiResourceId = Convert.IsDBNull(reader[22]) ? null : (Int32?)reader[22];
                    result.ApiResourceClaimType = Convert.IsDBNull(reader[23]) ? null : (String)reader[23];
                    result.ApiResourcePropertyId = Convert.IsDBNull(reader[24]) ? null : (Int32?)reader[24];
                    result.ApiResourcePropertyApiResourceId = Convert.IsDBNull(reader[25]) ? null : (Int32?)reader[25];
                    result.ApiResourcePropertyKey = Convert.IsDBNull(reader[26]) ? null : (String)reader[26];
                    result.ApiResourcePropertyValue = Convert.IsDBNull(reader[27]) ? null : (String)reader[27];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
        public async Task<List<GetAllApiScopesAsyncResponseModel>> GetAllApiScopesAsync(GetAllApiScopesAsyncRequestModel GetAllApiScopesAsyncRequestModel)
        {
            string sql = @"SELECT `a`.`Id`, `a`.`Description`, `a`.`DisplayName`, `a`.`Emphasize`, `a`.`Enabled`, `a`.`Name`, `a`.`Required`, `a`.`ShowInDiscoveryDocument`, `a0`.`Id`, `a0`.`ScopeId`, `a0`.`Type`, `a1`.`Id`, `a1`.`Key`, `a1`.`ScopeId`, `a1`.`Value`
				FROM `ApiScopes` AS `a`
				LEFT JOIN `ApiScopeClaims` AS `a0` ON `a`.`Id` = `a0`.`ScopeId`
				LEFT JOIN `ApiScopeProperties` AS `a1` ON `a`.`Id` = `a1`.`ScopeId`
				ORDER BY `a`.`Id`, `a0`.`Id`, `a1`.`Id`";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                List<GetAllApiScopesAsyncResponseModel> results = new List<GetAllApiScopesAsyncResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetAllApiScopesAsyncResponseModel result = new GetAllApiScopesAsyncResponseModel();
                    result.ApiScopeId = (Int32)reader[0];
                    result.ApiScopeDescription = Convert.IsDBNull(reader[1]) ? null : (String)reader[1];
                    result.ApiScopeDisplayName = Convert.IsDBNull(reader[2]) ? null : (String)reader[2];
                    result.ApiScopeEmphasize = (Boolean)reader[3];
                    result.ApiScopeEnabled = (Boolean)reader[4];
                    result.ApiScopeName = (String)reader[5];
                    result.ApiScopeRequired = (Boolean)reader[6];
                    result.ApiScopeShowInDiscoveryDocument = (Boolean)reader[7];
                    result.ApiScopeClaimId = Convert.IsDBNull(reader[8]) ? null : (Int32?)reader[8];
                    result.ApiScopeClaimScopeId = Convert.IsDBNull(reader[9]) ? null : (Int32?)reader[9];
                    result.ApiScopeClaimType = Convert.IsDBNull(reader[10]) ? null : (String)reader[10];
                    result.ApiScopePropertyId = Convert.IsDBNull(reader[11]) ? null : (Int32?)reader[11];
                    result.ApiScopePropertyKey = Convert.IsDBNull(reader[12]) ? null : (String)reader[12];
                    result.ApiScopePropertyScopeId = Convert.IsDBNull(reader[13]) ? null : (Int32?)reader[13];
                    result.ApiScopePropertyValue = Convert.IsDBNull(reader[14]) ? null : (String)reader[14];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
        public async Task<List<GetApiResourcesByNameAsyncResponseModel>> GetApiResourcesByNameAsync(GetApiResourcesByNameAsyncRequestModel GetApiResourcesByNameAsyncRequestModel)
        {
            var apiResourceNamesJoined = string.Join(",", GetApiResourcesByNameAsyncRequestModel?.apiResourceNames.Select((x,y) => "@apiResourceNames" + y.ToString()).ToArray());
            string sql = @"SELECT `a`.`Id`, `a`.`AllowedAccessTokenSigningAlgorithms`, `a`.`Created`, `a`.`Description`, `a`.`DisplayName`, `a`.`Enabled`, `a`.`LastAccessed`, `a`.`Name`, `a`.`NonEditable`, `a`.`ShowInDiscoveryDocument`, `a`.`Updated`, `a0`.`Id`, `a0`.`ApiResourceId`, `a0`.`Created`, `a0`.`Description`, `a0`.`Expiration`, `a0`.`Type`, `a0`.`Value`, `a1`.`Id`, `a1`.`ApiResourceId`, `a1`.`Scope`, `a2`.`Id`, `a2`.`ApiResourceId`, `a2`.`Type`, `a3`.`Id`, `a3`.`ApiResourceId`, `a3`.`Key`, `a3`.`Value`
				FROM `ApiResources` AS `a`
				LEFT JOIN `ApiResourceSecrets` AS `a0` ON `a`.`Id` = `a0`.`ApiResourceId`
				LEFT JOIN `ApiResourceScopes` AS `a1` ON `a`.`Id` = `a1`.`ApiResourceId`
				LEFT JOIN `ApiResourceClaims` AS `a2` ON `a`.`Id` = `a2`.`ApiResourceId`
				LEFT JOIN `ApiResourceProperties` AS `a3` ON `a`.`Id` = `a3`.`ApiResourceId`
				WHERE `a`.`Name` IN (" + apiResourceNamesJoined + @")
				ORDER BY `a`.`Id`, `a0`.`Id`, `a1`.`Id`, `a2`.`Id`, `a3`.`Id`";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                var apiResourceNamesParameters = GetApiResourcesByNameAsyncRequestModel?.apiResourceNames.Select((x,y) => new MySqlParameter("@apiResourceNames" + y.ToString(), x)).ToArray();
                cmd.Parameters.AddRange(apiResourceNamesParameters);
                List<GetApiResourcesByNameAsyncResponseModel> results = new List<GetApiResourcesByNameAsyncResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetApiResourcesByNameAsyncResponseModel result = new GetApiResourcesByNameAsyncResponseModel();
                    result.ApiResourceId = (Int32)reader[0];
                    result.ApiResourceAllowedAccessTokenSigningAlgorithms = Convert.IsDBNull(reader[1]) ? null : (String)reader[1];
                    result.ApiResourceCreated = (DateTime)reader[2];
                    result.ApiResourceDescription = Convert.IsDBNull(reader[3]) ? null : (String)reader[3];
                    result.ApiResourceDisplayName = Convert.IsDBNull(reader[4]) ? null : (String)reader[4];
                    result.ApiResourceEnabled = (Boolean)reader[5];
                    result.ApiResourceLastAccessed = Convert.IsDBNull(reader[6]) ? null : (DateTime?)reader[6];
                    result.ApiResourceName = (String)reader[7];
                    result.ApiResourceNonEditable = (Boolean)reader[8];
                    result.ApiResourceShowInDiscoveryDocument = (Boolean)reader[9];
                    result.ApiResourceUpdated = Convert.IsDBNull(reader[10]) ? null : (DateTime?)reader[10];
                    result.ApiResourceSecretId = Convert.IsDBNull(reader[11]) ? null : (Int32?)reader[11];
                    result.ApiResourceSecretApiResourceId = Convert.IsDBNull(reader[12]) ? null : (Int32?)reader[12];
                    result.ApiResourceSecretCreated = Convert.IsDBNull(reader[13]) ? null : (DateTime?)reader[13];
                    result.ApiResourceSecretDescription = Convert.IsDBNull(reader[14]) ? null : (String)reader[14];
                    result.ApiResourceSecretExpiration = Convert.IsDBNull(reader[15]) ? null : (DateTime?)reader[15];
                    result.ApiResourceSecretType = Convert.IsDBNull(reader[16]) ? null : (String)reader[16];
                    result.ApiResourceSecretValue = Convert.IsDBNull(reader[17]) ? null : (String)reader[17];
                    result.ApiResourceScopeId = Convert.IsDBNull(reader[18]) ? null : (Int32?)reader[18];
                    result.ApiResourceScopeApiResourceId = Convert.IsDBNull(reader[19]) ? null : (Int32?)reader[19];
                    result.ApiResourceScopeScope = Convert.IsDBNull(reader[20]) ? null : (String)reader[20];
                    result.ApiResourceClaimId = Convert.IsDBNull(reader[21]) ? null : (Int32?)reader[21];
                    result.ApiResourceClaimApiResourceId = Convert.IsDBNull(reader[22]) ? null : (Int32?)reader[22];
                    result.ApiResourceClaimType = Convert.IsDBNull(reader[23]) ? null : (String)reader[23];
                    result.ApiResourcePropertyId = Convert.IsDBNull(reader[24]) ? null : (Int32?)reader[24];
                    result.ApiResourcePropertyApiResourceId = Convert.IsDBNull(reader[25]) ? null : (Int32?)reader[25];
                    result.ApiResourcePropertyKey = Convert.IsDBNull(reader[26]) ? null : (String)reader[26];
                    result.ApiResourcePropertyValue = Convert.IsDBNull(reader[27]) ? null : (String)reader[27];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
        public async Task<List<GetApiResourcesByScopeNameAsyncResponseModel>> GetApiResourcesByScopeNameAsync(GetApiResourcesByScopeNameAsyncRequestModel GetApiResourcesByScopeNameAsyncRequestModel)
        {
            var scopeNamesJoined = string.Join(",", GetApiResourcesByScopeNameAsyncRequestModel?.scopeNames.Select((x,y) => "@scopeNames" + y.ToString()).ToArray());
            string sql = @"SELECT `a`.`Id`, `a`.`AllowedAccessTokenSigningAlgorithms`, `a`.`Created`, `a`.`Description`, `a`.`DisplayName`, `a`.`Enabled`, `a`.`LastAccessed`, `a`.`Name`, `a`.`NonEditable`, `a`.`ShowInDiscoveryDocument`, `a`.`Updated`, `a0`.`Id`, `a0`.`ApiResourceId`, `a0`.`Created`, `a0`.`Description`, `a0`.`Expiration`, `a0`.`Type`, `a0`.`Value`, `a1`.`Id`, `a1`.`ApiResourceId`, `a1`.`Scope`, `a2`.`Id`, `a2`.`ApiResourceId`, `a2`.`Type`, `a3`.`Id`, `a3`.`ApiResourceId`, `a3`.`Key`, `a3`.`Value`
				FROM `ApiResources` AS `a`
				LEFT JOIN `ApiResourceSecrets` AS `a0` ON `a`.`Id` = `a0`.`ApiResourceId`
				LEFT JOIN `ApiResourceScopes` AS `a1` ON `a`.`Id` = `a1`.`ApiResourceId`
				LEFT JOIN `ApiResourceClaims` AS `a2` ON `a`.`Id` = `a2`.`ApiResourceId`
				LEFT JOIN `ApiResourceProperties` AS `a3` ON `a`.`Id` = `a3`.`ApiResourceId`
				WHERE EXISTS (
				    SELECT 1
				    FROM `ApiResourceScopes` AS `a4`
				    WHERE (`a`.`Id` = `a4`.`ApiResourceId`) AND `a4`.`Scope` IN (" + scopeNamesJoined + @"))
				ORDER BY `a`.`Id`, `a0`.`Id`, `a1`.`Id`, `a2`.`Id`, `a3`.`Id`";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                var scopeNamesParameters = GetApiResourcesByScopeNameAsyncRequestModel?.scopeNames.Select((x,y) => new MySqlParameter("@scopeNames" + y.ToString(), x)).ToArray();
                cmd.Parameters.AddRange(scopeNamesParameters);
                List<GetApiResourcesByScopeNameAsyncResponseModel> results = new List<GetApiResourcesByScopeNameAsyncResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetApiResourcesByScopeNameAsyncResponseModel result = new GetApiResourcesByScopeNameAsyncResponseModel();
                    result.ApiResourceId = (Int32)reader[0];
                    result.ApiResourceAllowedAccessTokenSigningAlgorithms = Convert.IsDBNull(reader[1]) ? null : (String)reader[1];
                    result.ApiResourceCreated = (DateTime)reader[2];
                    result.ApiResourceDescription = Convert.IsDBNull(reader[3]) ? null : (String)reader[3];
                    result.ApiResourceDisplayName = Convert.IsDBNull(reader[4]) ? null : (String)reader[4];
                    result.ApiResourceEnabled = (Boolean)reader[5];
                    result.ApiResourceLastAccessed = Convert.IsDBNull(reader[6]) ? null : (DateTime?)reader[6];
                    result.ApiResourceName = (String)reader[7];
                    result.ApiResourceNonEditable = (Boolean)reader[8];
                    result.ApiResourceShowInDiscoveryDocument = (Boolean)reader[9];
                    result.ApiResourceUpdated = Convert.IsDBNull(reader[10]) ? null : (DateTime?)reader[10];
                    result.ApiResourceSecretId = Convert.IsDBNull(reader[11]) ? null : (Int32?)reader[11];
                    result.ApiResourceSecretApiResourceId = Convert.IsDBNull(reader[12]) ? null : (Int32?)reader[12];
                    result.ApiResourceSecretCreated = Convert.IsDBNull(reader[13]) ? null : (DateTime?)reader[13];
                    result.ApiResourceSecretDescription = Convert.IsDBNull(reader[14]) ? null : (String)reader[14];
                    result.ApiResourceSecretExpiration = Convert.IsDBNull(reader[15]) ? null : (DateTime?)reader[15];
                    result.ApiResourceSecretType = Convert.IsDBNull(reader[16]) ? null : (String)reader[16];
                    result.ApiResourceSecretValue = Convert.IsDBNull(reader[17]) ? null : (String)reader[17];
                    result.ApiResourceScopeId = Convert.IsDBNull(reader[18]) ? null : (Int32?)reader[18];
                    result.ApiResourceScopeApiResourceId = Convert.IsDBNull(reader[19]) ? null : (Int32?)reader[19];
                    result.ApiResourceScopeScope = Convert.IsDBNull(reader[20]) ? null : (String)reader[20];
                    result.ApiResourceClaimId = Convert.IsDBNull(reader[21]) ? null : (Int32?)reader[21];
                    result.ApiResourceClaimApiResourceId = Convert.IsDBNull(reader[22]) ? null : (Int32?)reader[22];
                    result.ApiResourceClaimType = Convert.IsDBNull(reader[23]) ? null : (String)reader[23];
                    result.ApiResourcePropertyId = Convert.IsDBNull(reader[24]) ? null : (Int32?)reader[24];
                    result.ApiResourcePropertyApiResourceId = Convert.IsDBNull(reader[25]) ? null : (Int32?)reader[25];
                    result.ApiResourcePropertyKey = Convert.IsDBNull(reader[26]) ? null : (String)reader[26];
                    result.ApiResourcePropertyValue = Convert.IsDBNull(reader[27]) ? null : (String)reader[27];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
        public async Task<List<GetApiScopesByNameAsyncResponseModel>> GetApiScopesByNameAsync(GetApiScopesByNameAsyncRequestModel GetApiScopesByNameAsyncRequestModel)
        {
            var scopeNamesJoined = string.Join(",", GetApiScopesByNameAsyncRequestModel?.scopeNames.Select((x,y) => "@scopeNames" + y.ToString()).ToArray());
            string sql = @"SELECT `a`.`Id`, `a`.`Description`, `a`.`DisplayName`, `a`.`Emphasize`, `a`.`Enabled`, `a`.`Name`, `a`.`Required`, `a`.`ShowInDiscoveryDocument`, `a0`.`Id`, `a0`.`ScopeId`, `a0`.`Type`, `a1`.`Id`, `a1`.`Key`, `a1`.`ScopeId`, `a1`.`Value`
				FROM `ApiScopes` AS `a`
				LEFT JOIN `ApiScopeClaims` AS `a0` ON `a`.`Id` = `a0`.`ScopeId`
				LEFT JOIN `ApiScopeProperties` AS `a1` ON `a`.`Id` = `a1`.`ScopeId`
				WHERE `a`.`Name` IN (" + scopeNamesJoined + @")
				ORDER BY `a`.`Id`, `a0`.`Id`, `a1`.`Id`";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                var scopeNamesParameters = GetApiScopesByNameAsyncRequestModel?.scopeNames.Select((x,y) => new MySqlParameter("@scopeNames" + y.ToString(), x)).ToArray();
                cmd.Parameters.AddRange(scopeNamesParameters);
                List<GetApiScopesByNameAsyncResponseModel> results = new List<GetApiScopesByNameAsyncResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetApiScopesByNameAsyncResponseModel result = new GetApiScopesByNameAsyncResponseModel();
                    result.ApiScopeId = (Int32)reader[0];
                    result.ApiScopeDescription = Convert.IsDBNull(reader[1]) ? null : (String)reader[1];
                    result.ApiScopeDisplayName = Convert.IsDBNull(reader[2]) ? null : (String)reader[2];
                    result.ApiScopeEmphasize = (Boolean)reader[3];
                    result.ApiScopeEnabled = (Boolean)reader[4];
                    result.ApiScopeName = (String)reader[5];
                    result.ApiScopeRequired = (Boolean)reader[6];
                    result.ApiScopeShowInDiscoveryDocument = (Boolean)reader[7];
                    result.ApiScopeClaimId = Convert.IsDBNull(reader[8]) ? null : (Int32?)reader[8];
                    result.ApiScopeClaimScopeId = Convert.IsDBNull(reader[9]) ? null : (Int32?)reader[9];
                    result.ApiScopeClaimType = Convert.IsDBNull(reader[10]) ? null : (String)reader[10];
                    result.ApiScopePropertyId = Convert.IsDBNull(reader[11]) ? null : (Int32?)reader[11];
                    result.ApiScopePropertyKey = Convert.IsDBNull(reader[12]) ? null : (String)reader[12];
                    result.ApiScopePropertyScopeId = Convert.IsDBNull(reader[13]) ? null : (Int32?)reader[13];
                    result.ApiScopePropertyValue = Convert.IsDBNull(reader[14]) ? null : (String)reader[14];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
    }
}

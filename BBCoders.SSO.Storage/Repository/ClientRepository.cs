//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using MySqlConnector;

namespace BBCoders.SSO.Storage
{
    public class ClientRepository
    {
        private readonly string _connectionString;
        public ClientRepository(string connectionString){ this._connectionString = connectionString; }
        public async Task<List<GetClientByIdAsyncResponseModel>> GetClientByIdAsync(GetClientByIdAsyncRequestModel GetClientByIdAsyncRequestModel)
        {
            string sql = @"SELECT `c`.`Id`, `c`.`AbsoluteRefreshTokenLifetime`, `c`.`AccessTokenLifetime`, `c`.`AccessTokenType`, `c`.`AllowAccessTokensViaBrowser`, `c`.`AllowOfflineAccess`, `c`.`AllowPlainTextPkce`, `c`.`AllowRememberConsent`, `c`.`AllowedIdentityTokenSigningAlgorithms`, `c`.`AlwaysIncludeUserClaimsInIdToken`, `c`.`AlwaysSendClientClaims`, `c`.`AuthorizationCodeLifetime`, `c`.`BackChannelLogoutSessionRequired`, `c`.`BackChannelLogoutUri`, `c`.`ClientClaimsPrefix`, `c`.`ClientId`, `c`.`ClientName`, `c`.`ClientUri`, `c`.`ConsentLifetime`, `c`.`Created`, `c`.`Description`, `c`.`DeviceCodeLifetime`, `c`.`EnableLocalLogin`, `c`.`Enabled`, `c`.`FrontChannelLogoutSessionRequired`, `c`.`FrontChannelLogoutUri`, `c`.`IdentityTokenLifetime`, `c`.`IncludeJwtId`, `c`.`LastAccessed`, `c`.`LogoUri`, `c`.`NonEditable`, `c`.`PairWiseSubjectSalt`, `c`.`ProtocolType`, `c`.`RefreshTokenExpiration`, `c`.`RefreshTokenUsage`, `c`.`RequireClientSecret`, `c`.`RequireConsent`, `c`.`RequirePkce`, `c`.`RequireRequestObject`, `c`.`SlidingRefreshTokenLifetime`, `c`.`UpdateAccessTokenClaimsOnRefresh`, `c`.`Updated`, `c`.`UserCodeType`, `c`.`UserSsoLifetime`, `c0`.`Id`, `c0`.`ClientId`, `c0`.`Origin`, `c1`.`Id`, `c1`.`ClientId`, `c1`.`GrantType`, `c2`.`Id`, `c2`.`ClientId`, `c2`.`Scope`, `c3`.`Id`, `c3`.`ClientId`, `c3`.`Type`, `c3`.`Value`, `c4`.`Id`, `c4`.`ClientId`, `c4`.`Created`, `c4`.`Description`, `c4`.`Expiration`, `c4`.`Type`, `c4`.`Value`, `c5`.`Id`, `c5`.`ClientId`, `c5`.`Provider`, `c6`.`Id`, `c6`.`ClientId`, `c6`.`PostLogoutRedirectUri`, `c7`.`Id`, `c7`.`ClientId`, `c7`.`Key`, `c7`.`Value`, `c8`.`Id`, `c8`.`ClientId`, `c8`.`RedirectUri`
				FROM `Clients` AS `c`
				LEFT JOIN `ClientCorsOrigins` AS `c0` ON `c`.`Id` = `c0`.`ClientId`
				LEFT JOIN `ClientGrantTypes` AS `c1` ON `c`.`Id` = `c1`.`ClientId`
				LEFT JOIN `ClientScopes` AS `c2` ON `c`.`Id` = `c2`.`ClientId`
				LEFT JOIN `ClientClaims` AS `c3` ON `c`.`Id` = `c3`.`ClientId`
				LEFT JOIN `ClientSecrets` AS `c4` ON `c`.`Id` = `c4`.`ClientId`
				LEFT JOIN `ClientIdPRestrictions` AS `c5` ON `c`.`Id` = `c5`.`ClientId`
				LEFT JOIN `ClientPostLogoutRedirectUri` AS `c6` ON `c`.`Id` = `c6`.`ClientId`
				LEFT JOIN `ClientProperties` AS `c7` ON `c`.`Id` = `c7`.`ClientId`
				LEFT JOIN `ClientRedirectUris` AS `c8` ON `c`.`Id` = `c8`.`ClientId`
				WHERE `c`.`ClientId` = @__Value_0
				ORDER BY `c`.`Id`, `c0`.`Id`, `c1`.`Id`, `c2`.`Id`, `c3`.`Id`, `c4`.`Id`, `c5`.`Id`, `c6`.`Id`, `c7`.`Id`, `c8`.`Id`";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@__Value_0", GetClientByIdAsyncRequestModel.clientId);
                List<GetClientByIdAsyncResponseModel> results = new List<GetClientByIdAsyncResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetClientByIdAsyncResponseModel result = new GetClientByIdAsyncResponseModel();
                    result.ClientId = (Int32)reader[0];
                    result.ClientAbsoluteRefreshTokenLifetime = (Int32)reader[1];
                    result.ClientAccessTokenLifetime = (Int32)reader[2];
                    result.ClientAccessTokenType = (Int32)reader[3];
                    result.ClientAllowAccessTokensViaBrowser = (Boolean)reader[4];
                    result.ClientAllowOfflineAccess = (Boolean)reader[5];
                    result.ClientAllowPlainTextPkce = (Boolean)reader[6];
                    result.ClientAllowRememberConsent = (Boolean)reader[7];
                    result.ClientAllowedIdentityTokenSigningAlgorithms = Convert.IsDBNull(reader[8]) ? null : (String)reader[8];
                    result.ClientAlwaysIncludeUserClaimsInIdToken = (Boolean)reader[9];
                    result.ClientAlwaysSendClientClaims = (Boolean)reader[10];
                    result.ClientAuthorizationCodeLifetime = (Int32)reader[11];
                    result.ClientBackChannelLogoutSessionRequired = (Boolean)reader[12];
                    result.ClientBackChannelLogoutUri = Convert.IsDBNull(reader[13]) ? null : (String)reader[13];
                    result.ClientClientClaimsPrefix = Convert.IsDBNull(reader[14]) ? null : (String)reader[14];
                    result.ClientClientId = (String)reader[15];
                    result.ClientClientName = Convert.IsDBNull(reader[16]) ? null : (String)reader[16];
                    result.ClientClientUri = Convert.IsDBNull(reader[17]) ? null : (String)reader[17];
                    result.ClientConsentLifetime = Convert.IsDBNull(reader[18]) ? null : (Int32?)reader[18];
                    result.ClientCreated = (DateTime)reader[19];
                    result.ClientDescription = Convert.IsDBNull(reader[20]) ? null : (String)reader[20];
                    result.ClientDeviceCodeLifetime = (Int32)reader[21];
                    result.ClientEnableLocalLogin = (Boolean)reader[22];
                    result.ClientEnabled = (Boolean)reader[23];
                    result.ClientFrontChannelLogoutSessionRequired = (Boolean)reader[24];
                    result.ClientFrontChannelLogoutUri = Convert.IsDBNull(reader[25]) ? null : (String)reader[25];
                    result.ClientIdentityTokenLifetime = (Int32)reader[26];
                    result.ClientIncludeJwtId = (Boolean)reader[27];
                    result.ClientLastAccessed = Convert.IsDBNull(reader[28]) ? null : (DateTime?)reader[28];
                    result.ClientLogoUri = Convert.IsDBNull(reader[29]) ? null : (String)reader[29];
                    result.ClientNonEditable = (Boolean)reader[30];
                    result.ClientPairWiseSubjectSalt = Convert.IsDBNull(reader[31]) ? null : (String)reader[31];
                    result.ClientProtocolType = (String)reader[32];
                    result.ClientRefreshTokenExpiration = (Int32)reader[33];
                    result.ClientRefreshTokenUsage = (Int32)reader[34];
                    result.ClientRequireClientSecret = (Boolean)reader[35];
                    result.ClientRequireConsent = (Boolean)reader[36];
                    result.ClientRequirePkce = (Boolean)reader[37];
                    result.ClientRequireRequestObject = (Boolean)reader[38];
                    result.ClientSlidingRefreshTokenLifetime = (Int32)reader[39];
                    result.ClientUpdateAccessTokenClaimsOnRefresh = (Boolean)reader[40];
                    result.ClientUpdated = Convert.IsDBNull(reader[41]) ? null : (DateTime?)reader[41];
                    result.ClientUserCodeType = Convert.IsDBNull(reader[42]) ? null : (String)reader[42];
                    result.ClientUserSsoLifetime = Convert.IsDBNull(reader[43]) ? null : (Int32?)reader[43];
                    result.ClientCorsOriginId = Convert.IsDBNull(reader[44]) ? null : (Int32?)reader[44];
                    result.ClientCorsOriginClientId = Convert.IsDBNull(reader[45]) ? null : (Int32?)reader[45];
                    result.ClientCorsOriginOrigin = Convert.IsDBNull(reader[46]) ? null : (String)reader[46];
                    result.ClientGrantTypeId = Convert.IsDBNull(reader[47]) ? null : (Int32?)reader[47];
                    result.ClientGrantTypeClientId = Convert.IsDBNull(reader[48]) ? null : (Int32?)reader[48];
                    result.ClientGrantTypeGrantType = Convert.IsDBNull(reader[49]) ? null : (String)reader[49];
                    result.ClientScopeId = Convert.IsDBNull(reader[50]) ? null : (Int32?)reader[50];
                    result.ClientScopeClientId = Convert.IsDBNull(reader[51]) ? null : (Int32?)reader[51];
                    result.ClientScopeScope = Convert.IsDBNull(reader[52]) ? null : (String)reader[52];
                    result.ClientClaimId = Convert.IsDBNull(reader[53]) ? null : (Int32?)reader[53];
                    result.ClientClaimClientId = Convert.IsDBNull(reader[54]) ? null : (Int32?)reader[54];
                    result.ClientClaimType = Convert.IsDBNull(reader[55]) ? null : (String)reader[55];
                    result.ClientClaimValue = Convert.IsDBNull(reader[56]) ? null : (String)reader[56];
                    result.ClientSecretId = Convert.IsDBNull(reader[57]) ? null : (Int32?)reader[57];
                    result.ClientSecretClientId = Convert.IsDBNull(reader[58]) ? null : (Int32?)reader[58];
                    result.ClientSecretCreated = Convert.IsDBNull(reader[59]) ? null : (DateTime?)reader[59];
                    result.ClientSecretDescription = Convert.IsDBNull(reader[60]) ? null : (String)reader[60];
                    result.ClientSecretExpiration = Convert.IsDBNull(reader[61]) ? null : (DateTime?)reader[61];
                    result.ClientSecretType = Convert.IsDBNull(reader[62]) ? null : (String)reader[62];
                    result.ClientSecretValue = Convert.IsDBNull(reader[63]) ? null : (String)reader[63];
                    result.ClientIdPRestrictionId = Convert.IsDBNull(reader[64]) ? null : (Int32?)reader[64];
                    result.ClientIdPRestrictionClientId = Convert.IsDBNull(reader[65]) ? null : (Int32?)reader[65];
                    result.ClientIdPRestrictionProvider = Convert.IsDBNull(reader[66]) ? null : (String)reader[66];
                    result.ClientPostLogoutRedirectUriId = Convert.IsDBNull(reader[67]) ? null : (Int32?)reader[67];
                    result.ClientPostLogoutRedirectUriClientId = Convert.IsDBNull(reader[68]) ? null : (Int32?)reader[68];
                    result.ClientPostLogoutRedirectUriPostLogoutRedirectUri = Convert.IsDBNull(reader[69]) ? null : (String)reader[69];
                    result.ClientPropertyId = Convert.IsDBNull(reader[70]) ? null : (Int32?)reader[70];
                    result.ClientPropertyClientId = Convert.IsDBNull(reader[71]) ? null : (Int32?)reader[71];
                    result.ClientPropertyKey = Convert.IsDBNull(reader[72]) ? null : (String)reader[72];
                    result.ClientPropertyValue = Convert.IsDBNull(reader[73]) ? null : (String)reader[73];
                    result.ClientRedirectUriId = Convert.IsDBNull(reader[74]) ? null : (Int32?)reader[74];
                    result.ClientRedirectUriClientId = Convert.IsDBNull(reader[75]) ? null : (Int32?)reader[75];
                    result.ClientRedirectUriRedirectUri = Convert.IsDBNull(reader[76]) ? null : (String)reader[76];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
    }
}
